@import './variables';

@mixin breakpoint($name) {
    @if not map-has-key($breakpoints, $name) {
        @warn "Warning: `#{$name}` is not a valid breakpoint name.";
    }

    @else {
        @media (min-width: map-get($breakpoints, $name)) {
            @content;
        }
    }
}

@mixin background-overlay($bgColor: $shark, $opacity: 0.9) {
    position: relative !important;

    &::before {
        content: '';
        position: absolute;
        z-index: -1;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        background-color: rgba($bgColor, $opacity);
    }
}

@mixin button-box-shadow($x: 1px, $y: 0, $blur: 8px, $spread: 2px, $color: $white, $opacity: 0.1) {
    box-shadow: $x $y $blur $spread rgba($color, $opacity);
}

@mixin pokemon-types-colors($colors: $type-colors) {

    @each $color,
    $value in $colors {
        &.--#{$color} {

            &::after,
            &::before {
                background-color: $value !important;
            }

            .pokemon-card__content-name {
                color: $value !important;
            }
        }
    }
}

@mixin status-bar-type-colors($colors: $type-colors) {

    @each $color,
    $value in $colors {
        &.--#{$color} {
            background-color: $value !important;
        }
    }
}

@mixin border-bottom-type-colors($colors: $type-colors) {

    @each $color,
    $value in $colors {
        &.--#{$color} {
            border-bottom-color: $value !important;
        }
    }
}

@mixin shape-fill-type-colors($colors: $type-colors) {

    @each $color,
    $value in $colors {
        &.--#{$color} {
            color: $value !important;
        }
    }
}
